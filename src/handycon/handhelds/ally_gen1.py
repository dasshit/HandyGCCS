#!/usr/bin/env python3
"""
This file is part of Handheld Game Console Controller System (HandyGCCS)
Copyright 2022-2023 Derek J. Clark <derekjohn.clark@gmail.com>
"""
from __future__ import annotations
from types import MethodType
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from src.handycon.handycon import HandheldController

import binascii
import time
import usb1
import logging

# Partial imports
from evdev import InputEvent

from ..constants import \
    EVENT_BTN_A, \
    EVENT_BTN_B, \
    EVENT_BTN_X, \
    EVENT_BTN_Y, EVENT_ALT_ENTER

logger = logging.getLogger('handycon')


def open_dev(vid_want, pid_want, usbcontext):

    logger.info("Scanning for devices...")
    for udev in usbcontext.getDeviceList(skip_on_error=True):
        vid = udev.getVendorID()
        pid = udev.getProductID()
        if (vid, pid) == (vid_want, pid_want):
            logger.info("Found device")
            logger.info(
                "Bus %03i Device %03i: ID %04x:%04x" % (
                    udev.getBusNumber(),
                    udev.getDeviceAddress(),
                    vid,
                    pid
                )
            )
            return udev.open()
    raise Exception("Failed to find a device")


def replay(dev):
    def bulkRead(endpoint, length, timeout=None):
        return dev.bulkRead(endpoint, length,
                            timeout=(1000 if timeout is None else timeout))

    def bulkWrite(endpoint, data, timeout=None):
        dev.bulkWrite(endpoint, data,
                      timeout=(1000 if timeout is None else timeout))

    def controlRead(bRequestType, bRequest, wValue, wIndex, wLength,
                    timeout=None):
        return dev.controlRead(bRequestType, bRequest, wValue, wIndex, wLength,
                               timeout=(1000 if timeout is None else timeout))

    def controlWrite(bRequestType, bRequest, wValue, wIndex, data,
                     timeout=None):
        dev.controlWrite(bRequestType, bRequest, wValue, wIndex, data,
                         timeout=(1000 if timeout is None else timeout))

    def interruptRead(endpoint, size, timeout=None):
        return dev.interruptRead(endpoint, size,
                                 timeout=(
                                     1000 if timeout is None else timeout))

    def interruptWrite(endpoint, data, timeout=None):
        dev.interruptWrite(endpoint, data,
                           timeout=(1000 if timeout is None else timeout))

    # Generated by usbrply
    # Source: Windows pcap (USBPcap)
    # cmd: /usr/bin/usbrply --device-hi --wrapper -p xboxinit.pcapng
    # PCapGen device hi: selected device 1
    # Generated from packet 1/2
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 3/4
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x0A\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # NOTE:: req max 64 but got 32
    # Generated from packet 7/8
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x02\x01\x2C\x01\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x05\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x01\x0A\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x03\x8C\x88\x76\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 9/10
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x0A\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # NOTE:: req max 64 but got 32
    # Generated from packet 13/14
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x02\x02\x2C\x01\x0B\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x04\x00\x00\x00\x00\x02\x82\x23\x00\x00\x00\x01\x0C\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x02\x82\x0D\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 15/16
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x0A\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # NOTE:: req max 64 but got 32
    # Generated from packet 19/20
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x02\x03\x2C\x01\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x08\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 21/22
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x0A\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # NOTE:: req max 64 but got 32
    # Generated from packet 25/26
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x02\x04\x2C\x01\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x06\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 27/28
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x0A\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # NOTE:: req max 64 but got 32
    # Generated from packet 31/32
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x02\x05\x2C\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x05\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x02\x82\x31\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 33/34
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x0A\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # NOTE:: req max 64 but got 32
    # Generated from packet 37/38
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x02\x06\x2C\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x04\x00\x00\x00\x00\x02\x82\x4D\x00\x00\x00\x01\x04\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x05\x00\x00\x1E\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 39/40
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x0A\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # NOTE:: req max 64 but got 32
    # Generated from packet 43/44
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x02\x07\x2C\x01\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x12\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 45/46
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x0A\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # NOTE:: req max 64 but got 32
    # Generated from packet 49/50
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x02\x08\x2C\x02\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x30\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 51/52
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x0A\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # NOTE:: req max 64 but got 32
    # Generated from packet 55/56
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x02\x09\x2C\x01\x0D\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x0E\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 57/58
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x0F\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 59/60
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x06\x02\x64\x64\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 61/62
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x04\x04\x00\x64\x00\x64\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # Generated from packet 63/64
    controlWrite(0x21, 0x09, 0x035A, 0x0002,
                 b"\x5A\xD1\x05\x04\x00\x64\x00\x64\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                 b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    # PcapGen: generated 65 packets
    # PcapGen device filter: dropped 0 / 65 packets
    # VidpidFilter: dropped 0 / 47 entries, want None
    # SetupFilter: dropped 9 / 48 entries


def init_handheld(handycon: "HandheldController"):
    """
    Captures keyboard events and translates them to virtual device events.
    :param handycon:
    :return:
    """
    handycon.system_type = "ALY_GEN1"
    handycon.process_event = MethodType(process_event, handycon)
    handycon.BUTTON_DELAY = 0.2
    handycon.CAPTURE_CONTROLLER = True
    handycon.CAPTURE_KEYBOARD = True
    handycon.CAPTURE_POWER = True
    handycon.GAMEPAD_ADDRESS = 'usb-0000:0a:00.3-2/input0'
    handycon.GAMEPAD_NAME = 'Microsoft X-Box 360 pad'
    handycon.KEYBOARD_ADDRESS = 'usb-0000:0a:00.3-3/input0'
    handycon.KEYBOARD_NAME = 'Asus Keyboard'
    handycon.KEYBOARD_2_ADDRESS = 'usb-0000:0a:00.3-3/input2'
    handycon.KEYBOARD_2_NAME = 'Asus Keyboard'

    with usb1.USBContext() as usb_context:
        dev = open_dev(0x0b05, 0x1abe, usb_context)
        if dev.kernelDriverActive(2) == 1:
            dev.detachKernelDriver(2)
            dev.claimInterface(2)
            dev.resetDevice()
            replay(dev)
            dev.releaseInterface(2)
            dev.attachKernelDriver(2)

async def process_event(
        handycon: "HandheldController",
        seed_event: InputEvent,
        active_keys: list[int]
):
    """
    Translate event to button press
    :param handycon:
    :param seed_event:
    :param active_keys:
    :return:
    """
    logger.debug(f'seed_event: {seed_event}')
    logger.debug(f'active_keys: {active_keys}')
    # Button map shortcuts for easy reference.
    button1 = handycon.button_map["button1"]  # Default Screenshot
    button2 = handycon.button_map["button2"]  # Default QAM
    button3 = handycon.button_map["button3"]  # Default ESC
    button4 = handycon.button_map["button4"]  # Default OSK
    button5 = handycon.button_map["button5"]  # Default MODE
    button6 = handycon.button_map["button6"]
    button7 = handycon.button_map["button7"]
    button8 = handycon.button_map["button8"]
    button9 = handycon.button_map["button9"]
    button10 = handycon.button_map["button10"]
    button11 = handycon.button_map["button11"]
    button12 = handycon.button_map["button12"]

    button_a = EVENT_BTN_A
    button_b = EVENT_BTN_B
    button_x = EVENT_BTN_X
    button_y = EVENT_BTN_Y

    # Loop variables
    button_on = seed_event.value
    this_button = None

    # Handle missed keys.
    if active_keys == [] and handycon.event_queue != []:
        this_button = handycon.event_queue[0]

    if active_keys == [307] \
            and seed_event.code == 186 \
            and button_on == 1:
        handycon.event_queue.append(["Open Keyboard"])

    if active_keys == [187] \
            and button_on in [1, 2]:
        await handycon.emit_now(seed_event, button_a, 1)
    elif active_keys == [] \
            and seed_event.code == 187 \
            and button_on == 0:
        await handycon.emit_now(seed_event, button_a, 0)

    if active_keys == [188] \
            and button_on in [1, 2]:
        await handycon.emit_now(seed_event, button_x, 1)
    elif active_keys == [] \
            and seed_event.code == 188 \
            and button_on == 0:
        await handycon.emit_now(seed_event, button_x, 0)

    # BUTTON 1 (Default: Screenshot) Paddle + Y
    if active_keys == [184] \
            and button_on == 1 \
            and button1 not in handycon.event_queue:
        handycon.event_queue.append(button1)
    elif active_keys == [] \
            and seed_event.code in [184, 185] \
            and button_on == 0 \
            and button1 in handycon.event_queue:
        this_button = button1

    # BUTTON 2 (Default: QAM) Armory Crate Button Short Press
    if active_keys == [148] \
            and button_on == 1 \
            and button2 not in handycon.event_queue:
        handycon.event_queue.append(button2)
    elif active_keys == [] \
            and seed_event.code in [148] \
            and button_on == 0 \
            and button2 in handycon.event_queue:
        this_button = button2

    # BUTTON 3 (Default: ESC) Paddle + X Temp disabled, goes nuts.
    # This event triggers from KEYBOARD_2.
    if active_keys == [25, 125] \
            and button_on == 1 \
            and button3 not in handycon.event_queue:
        handycon.event_queue.append(button3)
    elif active_keys == [] \
            and seed_event.code in [49, 125, 185] \
            and button_on == 0 \
            and button3 in handycon.event_queue:
        this_button = button3

    # BUTTON 4 (Default: OSK) Paddle + D-Pad UP
    if active_keys == [88] \
            and button_on == 1 \
            and button4 not in handycon.event_queue:
        handycon.event_queue.append(button4)
    elif active_keys == [] \
            and seed_event.code in [88, 185] \
            and button_on == 0 \
            and button4 in handycon.event_queue:
        this_button = button4

    # BUTTON 5 (Default: Mode) Control Center Short Press.
    if active_keys == [186] \
            and button_on == 1 \
            and button5 not in handycon.event_queue:
        handycon.event_queue.append(button5)
    elif active_keys == [] \
            and seed_event.code in [186] \
            and button_on == 0 \
            and button5 in handycon.event_queue:
        this_button = button5

    # BUTTON 6 (Default: Launch Chimera) Paddle + A
    if active_keys == [68] \
            and button_on == 1 \
            and button6 not in handycon.event_queue:
        handycon.event_queue.append(button6)
    elif active_keys == [] \
            and seed_event.code in [68, 185] \
            and button_on == 0 \
            and button6 in handycon.event_queue:
        this_button = button6

    # BUTTON 7 (Default: Toggle Performance) Armory Crate Button Long Press
    # This button triggers immediate down/up
    # after holding for ~1s an F17 and then
    # released another down/up for F18 on release.
    # We use the F18 "KEY_UP" for release.
    # if active_keys == [187] \
    #         and button_on == 1 \
    #         and button7 not in handycon.event_queue:
    #     handycon.event_queue.append(button7)
    #     await handycon.do_rumble(0, 150, 1000, 0)
    # elif active_keys == [] \
    #         and seed_event.code in [188] \
    #         and button_on == 0 \
    #         and button7 in handycon.event_queue:
    #     this_button = button7

    # BUTTON 8 (Default: Mode) Control Center Long Press.
    # This event triggers from KEYBOARD_2.
    if active_keys == [29, 56, 111] \
            and button_on == 1 \
            and button8 not in handycon.event_queue:
        handycon.event_queue.append(button8)
        await handycon.do_rumble(0, 150, 1000, 0)
    elif active_keys == [] \
            and seed_event.code in [29, 56, 111] \
            and button_on == 0 \
            and button8 in handycon.event_queue:
        this_button = button8

    # BUTTON 9 (Default: Toggle Mouse) Paddle + D-Pad DOWN
    # This event triggers from KEYBOARD_2.
    if active_keys == [1, 29, 42] \
            and button_on == 1 \
            and button9 not in handycon.event_queue:
        handycon.event_queue.append(button9)
    elif active_keys == [] \
            and seed_event.code in [1, 29, 42, 185] \
            and button_on == 0 \
            and button9 in handycon.event_queue:
        this_button = button9

    # BUTTON 10 (Default: ALT+TAB) Paddle + D-Pad LEFT
    # This event triggers from KEYBOARD_2.
    if active_keys == [32, 125] \
            and button_on == 1 \
            and button10 not in handycon.event_queue:
        handycon.event_queue.append(button10)
    elif active_keys == [] \
            and seed_event.code in [32, 125, 185] \
            and button_on == 0 \
            and button10 in handycon.event_queue:
        this_button = button10

    # BUTTON 11 (Default: KILL) Paddle + D-Pad RIGHT
    # This event triggers from KEYBOARD_2.
    if active_keys == [15, 125] \
            and button_on == 1 \
            and button11 not in handycon.event_queue:
        handycon.event_queue.append(button11)
    elif active_keys == [] \
            and seed_event.code in [15, 125, 185] \
            and button_on == 0 \
            and button11 in handycon.event_queue:
        this_button = button11

    # BUTTON 12 (Default: Toggle Gyro) Paddle + B
    # This event triggers from KEYBOARD_2.
    if active_keys == [49, 125] \
            and button_on == 1 \
            and button12 not in handycon.event_queue:
        handycon.event_queue.append(button12)
    elif active_keys == [] \
            and seed_event.code in [25, 125, 185] \
            and button_on == 0 \
            and button12 in handycon.event_queue:
        this_button = button12

    # Create list of events to fire.
    # Handle new button presses.
    if this_button and not handycon.last_button:
        handycon.event_queue.remove(this_button)
        handycon.last_button = this_button
        await handycon.emit_now(seed_event, this_button, 1)

    # Clean up old button presses.
    elif handycon.last_button and not this_button:
        await handycon.emit_now(seed_event, handycon.last_button, 0)
        handycon.last_button = None
